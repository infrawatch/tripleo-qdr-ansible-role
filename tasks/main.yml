---
###############################################################################
# NOTE: Anything that is in here is done every time you call the tripleo_role #
# This means you should add variable parsing and settings here.               #
# This should mimic the conditions section from tripleo-heat-templates        #
###############################################################################


# ***** TODO If this was just a loop through QDRVars it wouldn't need maintenance
- name: Set passthrough vars for qdr_config role
  set_fact:
    addresses: "{{ qdr_addresses }}"
    autolink_addresses: "{{ qdr_autolink_addresses }}"
    connectors: "{{ qdr_connectors }}"
    extra_listeners: "{{ qdr_extra_listeners }}"
    listener_auth_peer: "{{ qdr_listener_auth_peer }}"
    listener_port: "{{ qdr_listener_port }}"
    listener_require_ssl: "{{ qdr_listener_require_ssl }}"
    listener_sasl_mech: "{{ qdr_listener_sasl_mech }}"
    listener_ssl_cert_db: "{{ qdr_listener_ssl_cert_db }}"
    listener_ssl_cert_file: "{{ qdr_listener_ssl_cert_file }}"
    listener_ssl_key_file: "{{ qdr_listener_ssl_key_file }}"
    password: "{{ qdr_password }}"
    router_mode: "{{ qdr_router_mode }}"
    ssl_password: "{{ qdr_listener_ssl_password }}"
    ssl_profiles: "{{ qdr_ssl_profiles }}"
    ssl_pw_file: "{{ qdr_listener_ssl_pw_file }}"
    trusted_certs: "{{ qdr_listener_trusted_certs }}"
    username: "{{ qdr_username }}"

- name: Set listener address based on ServiceNetMap
  set_fact:
    listener_addr: "{{ lookup('hiera', tripleo_service_net_map[tripleo_role_name + 'MetricsQdrNetwork']) | regex_replace(\"b'(.*)'$\", '\\1') }}"

- name: Augment ssl_profiles with internal profile if required
  set_fact:
    ssl_profiles: "{{ ssl_profiles + [{'name': 'tlsProfile', 'certFile': listener_ssl_cert_file, 'keyFile': listener_ssl_key_file, 'caCertFile': tripleo_internal_tlscafile}] }}"
  when: tripleo_enable_internal_tls

# I'm trying to move THT logic here by feeding through the required THT vars

# Examples from collectd
    # amqp_connection: "{{ (collectd_connection_type == 'amqp1')|default(false) }}"
    # amqp_default_connection: "{{ (collectd_plugin_amqp1_host == 'nil')|default(false) }}"
    # amqp_default_interval: "{{ (tripleo_collectd_amqp_interval|int == -666)|default(false) }}"
    # collectd_connection: "{{ (collectd_connection_type == 'network')|default(false) }}"
    # gnocchi_connection:  "{{ (collectd_connection_type == 'gnocchi')|default(false) }}"
    # gnocchi_auth_basic:  "{{ (collectd_gnocchi_auth_mode == 'basic')|default(false) }}"
    # gnocchi_default_connection: "{{ ((collectd_gnocchi_server == 'nil') and (collectd_gnocchi_keystone_endpoint == 'nil'))|default(false) }}"

# Copied everything below from qdr-container-puppet.yaml
    # This one doesn't seem used even in legacy puppet-qdr?
          # - tripleo::profile::base::metrics::qdr::external_listener_addr:
          #     get_param: [EndpointMap, MetricsQdrPublic, host]

# *****

# # These could be constructed in ansible from listener_ssl_cert_file and listener_ssl_key_file

          #         - - name: 'tlsProfile'
          #             certFile: '/etc/pki/tls/certs/metrics_qdr.crt'
          #             keyFile: '/etc/pki/tls/private/metrics_qdr.key'
# # This is already in ansible as tripleo_internal_tlscafile
          #             caCertFile: {get_param: InternalTLSCAFile}

# Part of this may need to stay in the THT - it looks like it sets THT vars that drive certmonger
          # - if:
          #   - internal_tls_enabled
          #   - generate_service_certificates: true
          #     tripleo::metrics::qdr::service_certificate: '/etc/pki/tls/certs/metrics_qdr.crt'
          #     tripleo::metrics::qdr::service_key: '/etc/pki/tls/private/metrics_qdr.key'
# While we could match these statically, they should actually be passed in from the THT
          #     tripleo::profile::base::metrics::qdr::certificate_specs:
          #       service_certificate: '/etc/pki/tls/certs/metrics_qdr.crt'
          #       service_key: '/etc/pki/tls/private/metrics_qdr.key'
          #       postsave_cmd: "/usr/bin/certmonger-metrics-qdr-refresh.sh"
# This is the same as above but with `fqdn_` prepended
          #       hostname:
          #         str_replace:
          #           template: "%{hiera('fqdn_NETWORK')}"
          #           params:
          #             NETWORK:
          #               get_param:
          #                 - ServiceNetMap
          #                 - str_replace:
          #                     template: "ROLENAMEMetricsQdrNetwork"
          #                     params:
          #                       ROLENAME: {get_param: RoleName}
          #       principal:
          #         str_replace:
# ??
          #           template: "metrics_qdr/%{hiera('fqdn_NETWORK')}"
          #           params:
          #             NETWORK:
          #               get_param:
          #                 - ServiceNetMap
          #                 - str_replace:
          #                     template: "ROLENAMEMetricsQdrNetwork"
          #                     params:
          #                       ROLENAME: {get_param: RoleName}
# # These could be constructed in ansible from listener_ssl_cert_file and listener_ssl_key_file
# Adding this to the list of ssl_profiles we feed through
          #     tripleo::profile::base::metrics::qdr::ssl_profiles:
          #       list_concat:
          #         - get_param: MetricsQdrSSLProfiles
          #         - - name: 'tlsProfile'
          #             certFile: '/etc/pki/tls/certs/metrics_qdr.crt'
          #             keyFile: '/etc/pki/tls/private/metrics_qdr.key'
# # This is already in ansible as tripleo_internal_tlscafile
          #             caCertFile: {get_param: InternalTLSCAFile}
          #   - tripleo::profile::base::metrics::qdr::ssl_profiles: {get_param: MetricsQdrSSLProfiles}
          # - if:
          #   - enable_stf
          #   - tripleo::profile::base::metrics::qdr::interior_mesh_nodes: ''
          #     tripleo::profile::base::metrics::qdr::router_mode: edge
          #   - null

- name: Set logging params
  set_fact:
# TODO: Get these fed through as new QdrVars, right now there is no good way to alter them
    log_enable: 'info+'
    log_output: '/var/log/qdrouterd/metrics_qdr.log'

- name: Report what deployment stage we're at
  debug:
    msg: "This is deployment stage {{ deploy_stage }}"

###############################################################################
# TODO:  Above this line, set up the configs, and do whatever needs to be     #
# done before each stage can be run                                           #
###############################################################################

# *****TODO: Re-structure these to be logical tasks, not stage-based, and have tripleo do `tasks_from` instead of `include_role`, let tripleo define the stages and which tasks to run in each, tripleo-qdr-ansible-role should not know about stages
- name: Include tasks for deploy stage
  include_tasks: "{{ deploy_stage }}.yml"
